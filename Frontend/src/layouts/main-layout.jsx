import React from "react";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { Button } from "../components/ui/button";
import ChatBubbleOutlineIcon from "@mui/icons-material/ChatBubbleOutline";
import ArrowUpwardIcon from "@mui/icons-material/ArrowUpward";
import ReactMarkdown from "react-markdown";
import LocalHospitalIcon from "@mui/icons-material/LocalHospital";
import HomeRepairServiceIcon from "@mui/icons-material/HomeRepairService";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";

import { askMedicalAI, isPromptValid } from "../services/chatService";
import { getOpenSpecialties } from "../services/specialtyService";

function ScrollToTopButton() {
  const [visible, setVisible] = React.useState(false);
  React.useEffect(() => {
    const handleScroll = () => setVisible(window.scrollY > 200);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);
  return visible && (
    <Button
      onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
      variant="default"
      size="icon"
      round="full"
      className="fixed bottom-8 right-8 z-50 bg-custom-blue text-white shadow-lg hover:bg-custom-bluehover2 transition"
      aria-label="L√™n ƒë·∫ßu trang"
    >
      <ArrowUpwardIcon />
    </Button>
  );
}

function ChatToggleButton({ onClick }) {
  return (
    <Button
      onClick={onClick}
      variant="default"
      size="icon"
      round="full"
      className="fixed bottom-8 right-20 z-50 bg-custom-blue text-white shadow-lg hover:bg-custom-bluehover2 transition"
      aria-label="Tr·ª£ l√Ω AI"
    >
      <ChatBubbleOutlineIcon />
    </Button>
  );
}



function MainLayout({ children }) {
  const [showChat, setShowChat] = React.useState(false);
  const [input, setInput] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  const [messages, setMessages] = React.useState([]);
  const [specialtyList, setSpecialtyList] = React.useState([]);
  const [greetingShown, setGreetingShown] = React.useState(false);

  React.useEffect(() => {
    const fetchSpecialties = async () => {
      try {
        const result = await getOpenSpecialties();
        setSpecialtyList(result || []);
      } catch (err) {
        console.error("L·ªói l·∫•y danh s√°ch chuy√™n khoa:", err);
      }
    };
    fetchSpecialties();
  }, []);

  const generateSystemPrompt = () => {
    const names = specialtyList.map((s) => s.name).join(", ");
    return `B·∫°n l√† m·ªôt tr·ª£ l√Ω y t·∫ø AI c√≥ nhi·ªám v·ª• ti·∫øp nh·∫≠n c√°c tri·ªáu ch·ª©ng do ng∆∞·ªùi d√πng m√¥ t·∫£ v√† th·ª±c hi·ªán:

1. G·ª£i √Ω chuy√™n khoa ph√π h·ª£p m√† ng∆∞·ªùi d√πng n√™n ƒë·∫øn kh√°m (ch·ªâ ch·ªçn t·ª´ c√°c chuy√™n khoa sau: ${names}).
2. ƒê·ªÅ xu·∫•t c√°c bi·ªán ph√°p x·ª≠ l√Ω t·∫°m th·ªùi t·∫°i nh√† n·∫øu t√¨nh tr·∫°ng kh√¥ng nguy hi·ªÉm ngay.
3. C·∫£nh b√°o n·∫øu c√≥ d·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ho·∫∑c c·∫•p c·ª©u ngay l·∫≠p t·ª©c.
4. Tr√¨nh b√†y ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu, tr√°nh d√πng thu·∫≠t ng·ªØ y h·ªçc chuy√™n s√¢u.
5. Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng 3 m·ª•c r√µ r√†ng:
   - Chuy√™n khoa
   - X·ª≠ l√Ω t·∫°m th·ªùi
   - C·∫£nh b√°o`;
  };

  const handleToggleChat = () => {
    setShowChat((prev) => {
      const next = !prev;
      if (next && !greetingShown) {
        setMessages((prevMsgs) => [
          ...prevMsgs,
          {
            role: "assistant",
            content: "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω y t·∫ø AI. Vui l√≤ng m√¥ t·∫£ tri·ªáu ch·ª©ng ƒë·ªÉ t√¥i h·ªó tr·ª£ b·∫°n nh√©!",
          },
        ]);
        setGreetingShown(true);
      }
      return next;
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    if (!isPromptValid(input)) {
      setMessages((prev) => [
        ...prev,
        { role: "user", content: input },
        {
          role: "assistant",
          content: "N·ªôi dung b·∫°n nh·∫≠p kh√¥ng ph√π h·ª£p. Vui l√≤ng ch·ªâ nh·∫≠p c√°c tri·ªáu ch·ª©ng y t·∫ø h·ª£p l·ªá (v√≠ d·ª•: ƒëau b·ª•ng, kh√≥ th·ªü, s·ªët cao...).",
        },
      ]);
      setInput("");
      return;
    }

    const updatedMessages = [...messages, { role: "user", content: input }];
    setMessages(updatedMessages);
    setInput("");
    setLoading(true);

    try {
      const reply = await askMedicalAI(input, generateSystemPrompt());
      setMessages([...updatedMessages, { role: "assistant", content: reply }]);
    } catch (err) {
      console.error("L·ªói g·ªçi API Gemini:", err);
      setMessages([
        ...updatedMessages,
        { role: "assistant", content: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu." },
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <Header />
      <div>{children}</div>
      <Footer />
      <ScrollToTopButton />
      <ChatToggleButton onClick={handleToggleChat} />

      {showChat && (
        <div className="fixed bottom-24 right-8 w-[350px] h-[480px] bg-white border rounded-xl border-[#ccc] shadow-2xl z-50 flex flex-col">
          <div className="p-3 border-b text-center text-base font-bold bg-custom-blue rounded-t-xl text-white shadow-sm tracking-wide uppercase">
            Tr·ª£ l√Ω tri·ªáu ch·ª©ng
          </div>
          <div className="flex-1 p-2 overflow-y-auto" id="chat-messages">
            {messages.map((msg, i) => (
              <div key={i} className={`text-sm my-1 ${msg.role === "user" ? "text-right" : "text-left"}`}>
                <span className={`inline-block px-3 py-1 rounded-md ${msg.role === "user" ? "bg-blue-100" : "bg-gray-200"}`}>
                  <ReactMarkdown
                    components={{
                      p({ children }) {
                        const text = Array.isArray(children)
                          ? children.map(c => (typeof c === "string" ? c : "")).join("")
                          : typeof children === "string"
                            ? children
                            : "";

                        if (text.includes("Chuy√™n khoa")) {
                          return <p className="flex items-start gap-1"><LocalHospitalIcon fontSize="small" className="mt-1" />{children}</p>;
                        }
                        if (text.includes("X·ª≠ l√Ω t·∫°m th·ªùi")) {
                          return <p className="flex items-start gap-1"><HomeRepairServiceIcon fontSize="small" className="mt-1" />{children}</p>;
                        }
                        if (text.includes("C·∫£nh b√°o") || text.includes("L∆∞u √Ω")) {
                          return <p className="flex items-start gap-1 text-red-600 font-semibold"><WarningAmberIcon fontSize="small" className="mt-1" />{children}</p>;
                        }
                        return <p>{children}</p>;
                      }
                    }}
                  >
                    {msg.content}
                  </ReactMarkdown>
                </span>
              </div>
            ))}
          </div>
          <form onSubmit={handleSubmit} className="p-2 border-t flex gap-2">
            <input
              className="flex-1 border rounded-lg px-4 py-3 text-base focus:outline-none focus:ring-2 focus:ring-blue-400"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Nh·∫≠p tri·ªáu ch·ª©ng c·ªßa b·∫°n..."
              disabled={loading}
            />
            <button
              type="submit"
              disabled={loading}
              className="bg-custom-blue text-white px-4 py-3 rounded-lg text-base hover:bg-blue-600 disabled:opacity-50"
            >
              {loading ? "..." : "G·ª≠i"}
            </button>
          </form>
        </div>
      )}
    </div>
  );
}

export default MainLayout;
